"use client"\n\nimport { useState } from "react"\nimport { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"\nimport { Button } from "@/components/ui/button"\nimport { Input } from "@/components/ui/input"\nimport { Badge } from "@/components/ui/badge"\nimport { \n  Upload, \n  Brain, \n  GitBranch, \n  Zap, \n  FileOutput, \n  Search,\n  Plus,\n  Lightbulb\n} from "lucide-react"\nimport { SimpleNodeConfigs } from "./nodes/simple"\nimport { SimpleNodeType } from "@/lib/types"\n\ninterface SimpleNodeLibraryProps {\n  onAddNode: (nodeType: SimpleNodeType) => void\n}\n\nexport function SimpleNodeLibrary({ onAddNode }: SimpleNodeLibraryProps) {\n  const [searchTerm, setSearchTerm] = useState("")\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)\n\n  const nodeConfigs = Object.values(SimpleNodeConfigs)\n  \n  const filteredNodes = nodeConfigs.filter(node => {\n    const matchesSearch = searchTerm === \"\" || \n      node.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      node.businessDescription.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesCategory = selectedCategory === null || node.category === selectedCategory\n    \n    return matchesSearch && matchesCategory\n  })\n\n  const categories = [...new Set(nodeConfigs.map(node => node.category))]\n\n  const getNodeIcon = (iconName: string) => {\n    switch (iconName) {\n      case 'Upload': return <Upload className=\"h-5 w-5\" />\n      case 'Brain': return <Brain className=\"h-5 w-5\" />\n      case 'GitBranch': return <GitBranch className=\"h-5 w-5\" />\n      case 'Zap': return <Zap className=\"h-5 w-5\" />\n      case 'FileOutput': return <FileOutput className=\"h-5 w-5\" />\n      default: return <Plus className=\"h-5 w-5\" />\n    }\n  }\n\n  const examples = {\n    input: [\n      \"I receive customer support emails\",\n      \"Users upload CSV files with sales data\",\n      \"Webhook notifications from CRM\"\n    ],\n    process: [\n      \"Analyze customer sentiment from messages\",\n      \"Extract key information from documents\",\n      \"Classify tickets by urgency and department\"\n    ],\n    decision: [\n      \"If customer is angry, escalate to manager\",\n      \"If order value > $1000, require approval\",\n      \"If document contains PII, secure handling\"\n    ],\n    action: [\n      \"Send personalized email to customer\",\n      \"Update customer record in CRM\",\n      \"Post alert in Slack channel\"\n    ],\n    output: [\n      \"Generate summary report in PDF\",\n      \"Export results to CSV file\",\n      \"Send formatted response to user\"\n    ]\n  }\n\n  return (\n    <div className=\"w-80 bg-slate-900 border-r border-slate-700 flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-slate-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-3\">Add Nodes</h3>\n        \n        {/* Search */}\n        <div className=\"relative mb-3\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-slate-800 border-slate-600 text-white placeholder-slate-400\"\n          />\n        </div>\n        \n        {/* Categories */}\n        <div className=\"flex flex-wrap gap-1\">\n          <Button\n            variant={selectedCategory === null ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setSelectedCategory(null)}\n            className=\"text-xs\"\n          >\n            All\n          </Button>\n          {categories.map(category => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(category)}\n              className=\"text-xs\"\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Node List */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n        {filteredNodes.map(node => (\n          <Card \n            key={node.type}\n            className=\"bg-slate-800 border-slate-600 hover:bg-slate-750 transition-colors cursor-pointer\"\n            onClick={() => onAddNode(node.type as SimpleNodeType)}\n          >\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"flex items-center gap-2 text-sm text-white\">\n                <div style={{ color: node.color }}>\n                  {getNodeIcon(node.icon)}\n                </div>\n                <span>{node.label}</span>\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"pt-0\">\n              <p className=\"text-xs text-slate-300 mb-2\">\n                {node.businessDescription}\n              </p>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-1\">\n                  <Lightbulb className=\"h-3 w-3 text-yellow-400\" />\n                  <span className=\"text-xs text-slate-400\">Examples:</span>\n                </div>\n                \n                <div className=\"space-y-1\">\n                  {examples[node.type as keyof typeof examples]?.slice(0, 2).map((example, index) => (\n                    <div key={index} className=\"text-xs text-slate-400 pl-4 border-l-2 border-slate-600\">\n                      \"{example}\"\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <Badge \n                variant=\"outline\" \n                className=\"mt-2 text-xs\"\n                style={{ borderColor: node.color, color: node.color }}\n              >\n                {node.category}\n              </Badge>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Quick Start Guide */}\n      <div className=\"p-4 border-t border-slate-700\">\n        <div className=\"bg-teal-900/20 p-3 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Lightbulb className=\"h-4 w-4 text-teal-400\" />\n            <span className=\"text-sm font-medium text-teal-200\">Quick Start</span>\n          </div>\n          \n          <div className=\"text-xs text-teal-300/80 space-y-1\">\n            <div>1. Start with an <strong>Input</strong> node</div>\n            <div>2. Add <strong>Process</strong> nodes for AI analysis</div>\n            <div>3. Use <strong>Decision</strong> nodes to branch logic</div>\n            <div>4. Add <strong>Action</strong> nodes to do something</div>\n            <div>5. End with an <strong>Output</strong> node</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}